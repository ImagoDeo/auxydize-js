/*
RFC 6238                      HOTPTimeBased                     May 2011
M'Raihi, et al.               Informational                [Pages 14-15]

Appendix B.  Test Vectors (updated with errata)

   This section provides test values that can be used for the HOTP time-
   based variant algorithm interoperability test.

   The test token shared secrets use the following ASCII string values:
   - HMAC-SHA1: "12345678901234567890" (20 bytes)
   - HMAC-SHA256: "12345678901234567890123456789012" (32 bytes)
   - HMAC-SHA512:
     "1234567890123456789012345678901234567890123456789012345678901234" (64 bytes)

   With Time Step X = 30, and the Unix epoch as
   the initial value to count time steps, where T0 = 0, the TOTP
   algorithm will display the following values for specified modes and
   timestamps.

  +-------------+--------------+------------------+----------+--------+
  |  Time (sec) |   UTC Time   | Value of T (hex) |   TOTP   |  Mode  |
  +-------------+--------------+------------------+----------+--------+
  |      59     |  1970-01-01  | 0000000000000001 | 94287082 |  SHA1  |
  |             |   00:00:59   |                  |          |        |
  |      59     |  1970-01-01  | 0000000000000001 | 46119246 | SHA256 |
  |             |   00:00:59   |                  |          |        |
  |      59     |  1970-01-01  | 0000000000000001 | 90693936 | SHA512 |
  |             |   00:00:59   |                  |          |        |
  |  1111111109 |  2005-03-18  | 00000000023523EC | 07081804 |  SHA1  |
  |             |   01:58:29   |                  |          |        |
  |  1111111109 |  2005-03-18  | 00000000023523EC | 68084774 | SHA256 |
  |             |   01:58:29   |                  |          |        |
  |  1111111109 |  2005-03-18  | 00000000023523EC | 25091201 | SHA512 |
  |             |   01:58:29   |                  |          |        |
  |  1111111111 |  2005-03-18  | 00000000023523ED | 14050471 |  SHA1  |
  |             |   01:58:31   |                  |          |        |
  |  1111111111 |  2005-03-18  | 00000000023523ED | 67062674 | SHA256 |
  |             |   01:58:31   |                  |          |        |
  |  1111111111 |  2005-03-18  | 00000000023523ED | 99943326 | SHA512 |
  |             |   01:58:31   |                  |          |        |
  |  1234567890 |  2009-02-13  | 000000000273EF07 | 89005924 |  SHA1  |
  |             |   23:31:30   |                  |          |        |
  |  1234567890 |  2009-02-13  | 000000000273EF07 | 91819424 | SHA256 |
  |             |   23:31:30   |                  |          |        |
  |  1234567890 |  2009-02-13  | 000000000273EF07 | 93441116 | SHA512 |
  |             |   23:31:30   |                  |          |        |
  |  2000000000 |  2033-05-18  | 0000000003F940AA | 69279037 |  SHA1  |
  |             |   03:33:20   |                  |          |        |
  |  2000000000 |  2033-05-18  | 0000000003F940AA | 90698825 | SHA256 |
  |             |   03:33:20   |                  |          |        |
  |  2000000000 |  2033-05-18  | 0000000003F940AA | 38618901 | SHA512 |
  |             |   03:33:20   |                  |          |        |
  | 20000000000 |  2603-10-11  | 0000000027BC86AA | 65353130 |  SHA1  |
  |             |   11:33:20   |                  |          |        |
  | 20000000000 |  2603-10-11  | 0000000027BC86AA | 77737706 | SHA256 |
  |             |   11:33:20   |                  |          |        |
  | 20000000000 |  2603-10-11  | 0000000027BC86AA | 47863826 | SHA512 |
  |             |   11:33:20   |                  |          |        |
  +-------------+--------------+------------------+----------+--------+
 */

const { generateTOTP } = require('./generator');

let dateNowSpy;

beforeAll(() => {
  dateNowSpy = jest.spyOn(Date, 'now');
});

afterAll(() => {
  dateNowSpy.mockRestore();
});

const secrets = {
  SHA1: Buffer.from('12345678901234567890'),
  SHA256: Buffer.from('12345678901234567890123456789012'),
  SHA512: Buffer.from(
    '1234567890123456789012345678901234567890123456789012345678901234',
  ),
};

const TEST_CASES = [
  ['94287082', 59, 'SHA1'],
  ['46119246', 59, 'SHA256'],
  ['90693936', 59, 'SHA512'],
  ['07081804', 1111111109, 'SHA1'],
  ['68084774', 1111111109, 'SHA256'],
  ['25091201', 1111111109, 'SHA512'],
  ['14050471', 1111111111, 'SHA1'],
  ['67062674', 1111111111, 'SHA256'],
  ['99943326', 1111111111, 'SHA512'],
  ['89005924', 1234567890, 'SHA1'],
  ['91819424', 1234567890, 'SHA256'],
  ['93441116', 1234567890, 'SHA512'],
  ['69279037', 2000000000, 'SHA1'],
  ['90698825', 2000000000, 'SHA256'],
  ['38618901', 2000000000, 'SHA512'],
  ['65353130', 20000000000, 'SHA1'],
  ['77737706', 20000000000, 'SHA256'],
  ['47863826', 20000000000, 'SHA512'],
];

describe('generator', () => {
  it.each(TEST_CASES)(
    'should generate %s where time = %i and algorithm = %s',
    (result, time, algorithm) => {
      dateNowSpy.mockImplementation(() => time * 1000);
      const { totp } = generateTOTP({
        secret: secrets[algorithm],
        algorithm,
        digits: 8,
      });
      expect(totp).toEqual(result);
    },
  );
});
